- hosts: all

  vars:
    container_label: 'calendar-frontend'

  tasks:

    - name: 'Retrieve container IDs of previous web versions'
      command: "docker ps -qa --no-trunc --filter 'label=app={{ container_label }}'"
      register: previous_containers

    - name: 'Stop old container to free port'
      shell: "docker stop {{ item }}"
#      ignore_errors: 'yes'
#      shell: "docker stop {{ container_id }} ; docker rm --force {{ container_id }}"
      with_items: "{{ previous_containers.stdout_lines }}"
      when: (item.find(container_label) == -1)

    - name: 'Start or replace a container with docker_container module'
      docker_container:
        name: "calendar-frontend-{{ ansible_date_time.epoch }}"
        image: "172.17.21.6:8888/calendar-frontend:latest"
        detach: true
        pull: yes
        labels:
          app: "calendar-frontend"
        env:
          test1: "es321"
        ports:
          - '8089:80'
      register: docker_results

    - name: 'Retrieve container ID and ephemeral port'
      set_fact:
        container_id: "{{ docker_results.ansible_facts.docker_container.Id }}"
        ephemeral_port: "{{ docker_results.ansible_facts.docker_container.NetworkSettings.Ports['7000/tcp'][0].HostPort }}"

    - block:
      - name: 'Verify that the new container is serving traffic'
        uri:
          url: "http://localhost:{{ ephemeral_port }}/"
          status_code: 200
        register: container_status
        retries: "{{ app.health_retries | default('20') }}"
        delay: "{{ app.health_retry_delay | default('2') }}"
        until: "container_status.status == 200"
      rescue:
      - name: 'Terminate failed container'
        shell: "docker stop {{ container_id }} ; docker rm --force {{ container_id }}"
        ignore_errors: 'yes'
      - fail:
          msg: 'New container failed to return HTTP 200 and has been terminated'

    - name: 'Queue previous containers to terminate in 2 minutes'
      at:
        command: "/usr/bin/docker rm --force {{ item }}"
        count: 1
        units: 'minutes'
      with_items: "{{ previous_containers.stdout_lines }}"
      when: (item.find(container_id) == -1)
