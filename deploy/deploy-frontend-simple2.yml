- hosts: all

  vars:
    image_name: '172.17.21.6:8888/calendar-frontend:latest'
    container_name: 'calendar-frontend'
    container_label: 'calendar-frontend'
    container_ext_port: '8089'

  tasks:

    - name: 'Retrieve container IDs of previous web versions'
      command: "docker ps -qa --no-trunc --filter 'label=app={{ container_label }}'"
      register: previous_containers

    - name: 'Stop old container to free port'
      shell: "docker stop {{ item }}"
      ignore_errors: 'yes'
#      shell: "docker stop {{ container_id }} ; docker rm --force {{ container_id }}"
      with_items: "{{ previous_containers.stdout_lines }}"
      when: (item.find(container_label) == -1)

#    - name: 'Stop old container to free port'
#      ignore_errors: 'yes'
#      shell: "docker stop {{ container_name }} ; docker rm --force {{ container_name }}"

    - name: 'Start or replace a container with docker_container module'
      docker_container:
        name: "{{ container_name }}-{{ ansible_date_time.epoch }}"
        image: "{{ image_name }}"
        detach: true
        pull: yes
        labels:
          app: "{{ container_name }}"
        env:
          test1: "es321"
        ports:
          - '{{ container_ext_port }}:80'
      register: docker_results

    - block:
      - name: 'Verify that the new container is serving traffic'
        uri:
          url: "http://localhost:{{ container_ext_port }}/"
          status_code: 200
        register: container_status
        retries: "10"
        delay: "2"
        until: "container_status.status == 200"

    - name: 'Queue previous containers to RM in 600 minutes'
      at:
        command: "/usr/bin/docker rm --force {{ item }}"
        count: 600
        units: 'minutes'
      with_items: "{{ previous_containers.stdout_lines }}"
      when: (item.find(container_id) == -1)

